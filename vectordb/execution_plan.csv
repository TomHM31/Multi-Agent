task,plan,code,function_detail
How many games did the Rays win in 2022?,"1. Import the schedule_and_record function from pybaseball:

```python
from pybaseball import schedule_and_record
```

2. Get the 2022 schedule and results for the Tampa Bay Rays:

```python
rays_2022 = schedule_and_record(2022, 'TB')
```

3. Filter the dataframe to games where the Rays won (W/L == 'W') or had a walk-off win (W/L == 'W-wo'):

```python
rays_wins = rays_2022[(rays_2022['W/L'] == 'W') | (rays_2022['W/L'] == 'W-wo')]
```

4. Count the number of rows (games won) in the filtered dataframe:

```python
num_wins = len(rays_wins)
print(f""The Tampa Bay Rays won {num_wins} games in 2022."")
```","# 1. Import the schedule_and_record function from pybaseball
from pybaseball import schedule_and_record
# 2. Get the 2022 schedule and results for the Tampa Bay Rays
rays_2022 = schedule_and_record(2022, 'TB')
# 3. Filter the dataframe to games where the Rays won (W/L == 'W') or had a walk-off win (W/L == 'W-wo')
rays_wins = rays_2022[(rays_2022['W/L'] == 'W') | (rays_2022['W/L'] == 'W-wo')]
# 4. Count the number of rows (games won) in the filtered dataframe
num_wins = len(rays_wins)
print(f""The Tampa Bay Rays won {num_wins} games in 2022."")",seed_function_detail
How many home runs did Derek Jeter hit in 2008?,"1. Import the statcast_batter and playerid_lookup functions from pybaseball, as well as datetime for date handling:

```python
from pybaseball import statcast_batter, playerid_lookup 
from datetime import datetime
```

2. Look up Derek Jeter's MLBAM player ID:

```python
jeter_id = playerid_lookup('jeter', 'derek')
jeter_mlbam_id = jeter_id.loc[0,'key_mlbam'] 
```

3. Get Derek Jeter's statcast batting data for the 2008 season. Convert the start and end dates to datetime objects: 

```python
start_date = datetime(2008, 1, 1)
end_date = datetime(2008, 12, 31)
jeter_2008_data = statcast_batter(start_date, end_date, player_id=jeter_mlbam_id)
```

4. Filter to just home runs and count the number of rows:

```python
jeter_2008_hr = jeter_2008_data[jeter_2008_data['events'] == 'home_run'] 
hr_count = len(jeter_2008_hr)
print(f""Derek Jeter hit {hr_count} home runs in the 2008 season."")  
```

Are you satisfied with this plan?","# 1. Import necessary libraries
from pybaseball import statcast_batter, playerid_lookup
from datetime import datetime
# 2. Look up Derek Jeter's player ID 
jeter_id = playerid_lookup('jeter', 'derek')
jeter_mlbam_id = jeter_id.loc[0,'key_mlbam']
print(f""Derek Jeter's MLBAM ID is: {jeter_mlbam_id}"")
# 3. Get Derek Jeter's 2008 batting data  
start_date = datetime(2008, 1, 1).strftime('%Y-%m-%d')
end_date = datetime(2008, 12, 31).strftime('%Y-%m-%d') 
jeter_2008_data = statcast_batter(start_date, end_date, player_id=jeter_mlbam_id)
# 4. Filter to home runs and count
jeter_2008_hr = jeter_2008_data[jeter_2008_data['events'] == 'home_run']  
hr_count = len(jeter_2008_hr)
print(f""Derek Jeter hit {hr_count} home runs in the 2008 season."")","Text between the <statcast_batter_documentation></statcast_batter_documentation> tags is documentation for the statcast_batter library.  Consult this section to confirm which attributes to pass into the statcast_batter library.
<statcast_batter_documentation>
# Statcast Batter
`statcast_batter(start_dt=[yesterday's date], end_dt=None, player_id)`

The statcast function retrieves pitch-level statcast data for a given date or range or dates. 

## Arguments
`start_dt:` first day for which you want to retrieve data. Defaults to yesterday's date if nothing is entered. If you only want data for one date, supply a `start_dt` value but not an `end_dt` value. Format: YYYY-MM-DD. 

`end_dt:` last day for which you want to retrieve data. Defaults to None. If you want to retrieve data for more than one day, both a `start_dt` and `end_dt` value must be given. Format: YYYY-MM-DD. 

`player_id:` MLBAM player ID for the player you want to retrieve data for. To find a player's MLBAM ID, see the function [playerid_lookup](http://github.com/jldbc/pybaseball/docs/playerid_lookup.md) or the examples below. 

### A note on data availability 
The earliest available statcast data comes from the 2008 season when the system was first introduced to Major League Baseball. Queries before this year will not work. Further, some features were introduced after the 2008 season. Launch speed angle, for example, is only available from the 2015 season forward. 

## Examples of valid queries

```python
from pybaseball import statcast_batter
from pybaseball import playerid_lookup

# find David Ortiz's player id (mlbam_key)
playerid_lookup('ortiz','david')

# get all available data
data = statcast_batter('2008-04-01', '2017-07-15', player_id = 120074)

# get data for August 16th, 2014
data = statcast_batter('2014-08-16', player_id = 120074)
```

</statcast_batter_documentation>
Text between the <playerid_lookup_documentation></playerid_lookup_documentation> tags is documentation for the playerid_lookup library.  Consult this section to confirm which attributes to pass into the playerid_lookup library.
<playerid_lookup_documentation>
# Player ID Lookup

## Single Player Lookup

`playerid_lookup(last, first=None, fuzzy=False)`

Look up a player's MLBAM, Retrosheet, FanGraphs, and Baseball Reference ID by name.

## Arguments
`last:` String. The player's last name. Case insensitive.

`first:` String. Optional. The player's first name. Case insensitive.

`fuzzy:` Boolean. Optional. Search for inexact name matches, the 5 closest will be returned.

Providing last name only will return all available id data for players with that last name (this will return several rows for a common last name like Jones, for example.) If multiple players exist for a (last name, first name) pair, you can figure out who's who by seeing their first and last years of play in the fields `mlb_played_first` and `mlb_played_last`.

This data comes from Chadwick Bureau, meaning that there are several people in this data who are not MLB players. For this reason, supplying both last and first name is recommended to narrow your search. 

## Examples of valid queries

```python
from pybaseball import playerid_lookup

# find the ids of all players with last name Jones (returns 1,314 rows)
data = playerid_lookup('jones')

# only return the ids of chipper jones (returns one row)
data = playerid_lookup('jones','chipper')

# Will return all players named Pedro Martinez (returns *2* rows)
data = playerid_lookup(""martinez"", ""pedro"", fuzzy=True)

# Will return the 5 closest names to ""yadi molina"" (returns 5 rows)
# First row will be Yadier Molina
data = playerid_lookup(""molina"", ""yadi"", fuzzy=True)
```

## List Lookup

`player_search_list(player_list)`

Look up a list of player ID's by name, return a data frame of all players

`player_list:` List. A list of tuples, of the form `(last, first)`. Case Insensitive.

Sources are the same as those used in the above `playerid_lookup` function. Queries for this function must be exact name matches.

## Examples of valid queries

```python

from pybaseball import player_search_list

# Will return the ids for both Lou Brock and Chipper Jones (returns 2 rows)
data = player_search_list([(""brock"",""lou""), (""jones"",""chipper"")])

```
</playerid_lookup_documentation>
"
How many doubles did Whit Merrifield hit in 2019?,"1. Import the statcast_batter and playerid_lookup functions from pybaseball, as well as datetime for date handling:

```python
from pybaseball import statcast_batter, playerid_lookup
from datetime import datetime
```

2. Look up Whit Merrifield's MLBAM player ID:

```python
merrifield_id = playerid_lookup('merrifield', 'whit')
merrifield_mlbam_id = merrifield_id.loc[0,'key_mlbam']
```

3. Get Whit Merrifield's statcast batting data for the 2019 season. Convert the start and end dates to datetime objects:

```python
start_date = datetime(2019, 1, 1)
end_date = datetime(2019, 12, 31)
merrifield_2019_data = statcast_batter(start_date, end_date, player_id=merrifield_mlbam_id)
```

4. Filter to just doubles and count the number of rows:

```python
merrifield_2019_doubles = merrifield_2019_data[merrifield_2019_data['events'] == 'double']
doubles_count = len(merrifield_2019_doubles)
print(f""Whit Merrifield hit {doubles_count} doubles in the 2019 season."")
```","# Import necessary libraries
from pybaseball import statcast_batter, playerid_lookup 
from datetime import datetime
# Look up Whit Merrifield's player ID
merrifield_id = playerid_lookup('merrifield', 'whit')
merrifield_mlbam_id = merrifield_id.loc[0,'key_mlbam']
print(f""Whit Merrifield's MLBAM ID is: {merrifield_mlbam_id}"")
start_date = datetime(2019, 1, 1).strftime('%Y-%m-%d') 
end_date = datetime(2019, 12, 31).strftime('%Y-%m-%d')
merrifield_2019_data = statcast_batter(start_date, end_date, player_id=593160)
# Filter to doubles and count
merrifield_2019_doubles = merrifield_2019_data[merrifield_2019_data['events'] == 'double']
doubles_count = len(merrifield_2019_doubles)
print(f""Whit Merrifield hit {doubles_count} doubles in the 2019 season."")","Text between the <statcast_batter_documentation></statcast_batter_documentation> tags is documentation for the statcast_batter library.  Consult this section to confirm which attributes to pass into the statcast_batter library.
<statcast_batter_documentation>
# Statcast Batter
`statcast_batter(start_dt=[yesterday's date], end_dt=None, player_id)`

The statcast function retrieves pitch-level statcast data for a given date or range or dates. 

## Arguments
`start_dt:` first day for which you want to retrieve data. Defaults to yesterday's date if nothing is entered. If you only want data for one date, supply a `start_dt` value but not an `end_dt` value. Format: YYYY-MM-DD. 

`end_dt:` last day for which you want to retrieve data. Defaults to None. If you want to retrieve data for more than one day, both a `start_dt` and `end_dt` value must be given. Format: YYYY-MM-DD. 

`player_id:` MLBAM player ID for the player you want to retrieve data for. To find a player's MLBAM ID, see the function [playerid_lookup](http://github.com/jldbc/pybaseball/docs/playerid_lookup.md) or the examples below. 

### A note on data availability 
The earliest available statcast data comes from the 2008 season when the system was first introduced to Major League Baseball. Queries before this year will not work. Further, some features were introduced after the 2008 season. Launch speed angle, for example, is only available from the 2015 season forward. 

## Examples of valid queries

```python
from pybaseball import statcast_batter
from pybaseball import playerid_lookup

# find David Ortiz's player id (mlbam_key)
playerid_lookup('ortiz','david')

# get all available data
data = statcast_batter('2008-04-01', '2017-07-15', player_id = 120074)

# get data for August 16th, 2014
data = statcast_batter('2014-08-16', player_id = 120074)
```

</statcast_batter_documentation>
Text between the <playerid_lookup_documentation></playerid_lookup_documentation> tags is documentation for the playerid_lookup library.  Consult this section to confirm which attributes to pass into the playerid_lookup library.
<playerid_lookup_documentation>
# Player ID Lookup

## Single Player Lookup

`playerid_lookup(last, first=None, fuzzy=False)`

Look up a player's MLBAM, Retrosheet, FanGraphs, and Baseball Reference ID by name.

## Arguments
`last:` String. The player's last name. Case insensitive.

`first:` String. Optional. The player's first name. Case insensitive.

`fuzzy:` Boolean. Optional. Search for inexact name matches, the 5 closest will be returned.

Providing last name only will return all available id data for players with that last name (this will return several rows for a common last name like Jones, for example.) If multiple players exist for a (last name, first name) pair, you can figure out who's who by seeing their first and last years of play in the fields `mlb_played_first` and `mlb_played_last`.

This data comes from Chadwick Bureau, meaning that there are several people in this data who are not MLB players. For this reason, supplying both last and first name is recommended to narrow your search. 

## Examples of valid queries

```python
from pybaseball import playerid_lookup

# find the ids of all players with last name Jones (returns 1,314 rows)
data = playerid_lookup('jones')

# only return the ids of chipper jones (returns one row)
data = playerid_lookup('jones','chipper')

# Will return all players named Pedro Martinez (returns *2* rows)
data = playerid_lookup(""martinez"", ""pedro"", fuzzy=True)

# Will return the 5 closest names to ""yadi molina"" (returns 5 rows)
# First row will be Yadier Molina
data = playerid_lookup(""molina"", ""yadi"", fuzzy=True)
```

## List Lookup

`player_search_list(player_list)`

Look up a list of player ID's by name, return a data frame of all players

`player_list:` List. A list of tuples, of the form `(last, first)`. Case Insensitive.

Sources are the same as those used in the above `playerid_lookup` function. Queries for this function must be exact name matches.

## Examples of valid queries

```python

from pybaseball import player_search_list

# Will return the ids for both Lou Brock and Chipper Jones (returns 2 rows)
data = player_search_list([(""brock"",""lou""), (""jones"",""chipper"")])

```
</playerid_lookup_documentation>
"
Plot the cumulative sum of strikeouts thrown by Danny Duffy in the 2018 season.,"1. Import the statcast_pitcher and playerid_lookup functions from pybaseball, as well as datetime for date handling and matplotlib for plotting:

```python 
from pybaseball import statcast_pitcher, playerid_lookup
from datetime import datetime
import matplotlib.pyplot as plt
```

2. Look up Danny Duffy's MLBAM player ID. Handle the case where there may be multiple Danny Duffys by taking the most recent one based on mlb_played_last:

```python
duffy_id = playerid_lookup('duffy', 'danny')  
duffy_id = duffy_id[duffy_id['mlb_played_last'] == duffy_id['mlb_played_last'].max()]
duffy_mlbam_id = duffy_id.loc[0,'key_mlbam']  
```

3. Get Danny Duffy's statcast pitching data for the 2018 season. Convert the start and end dates to datetime objects:

```python
start_date = datetime(2018, 1, 1) 
end_date = datetime(2018, 12, 31)
duffy_2018_data = statcast_pitcher(start_date, end_date, player_id=duffy_mlbam_id)
```

4. Filter to just strikeouts, group by game date, and count the strikeouts for each game:

```python
duffy_2018_so = duffy_2018_data[duffy_2018_data['events'] == 'strikeout'] 
so_by_game = duffy_2018_so.groupby('game_date').size()
```

5. Calculate the cumulative sum of strikeouts and plot it:

```python
cumulative_so = so_by_game.cumsum()

plt.figure(figsize=(12,8))
plt.plot(cumulative_so.index, cumulative_so) 
plt.xlabel('Game Date')
plt.ylabel('Total K\'s') 
plt.title(f""Danny Duffy's Cumulative Strikeouts in 2018"")
plt.show()
```

Are you satisfied with this plan?","# 1. Import necessary libraries
from pybaseball import statcast_pitcher, playerid_lookup 
from datetime import datetime
import matplotlib.pyplot as plt
# 2. Look up Danny Duffy's MLBAM player ID
duffy_id = playerid_lookup('duffy', 'danny')
# Handle case where there may be multiple Danny Duffys by taking most recent  
duffy_id = duffy_id[duffy_id['mlb_played_last'] == duffy_id['mlb_played_last'].max()]
duffy_mlbam_id = duffy_id.loc[0,'key_mlbam']
print(f""Danny Duffy's MLBAM ID is: {duffy_mlbam_id}"")
# 3. Get Danny Duffy's 2018 pitching data  
start_date = datetime(2018, 1, 1).strftime('%Y-%m-%d')
end_date = datetime(2018, 12, 31).strftime('%Y-%m-%d')
duffy_2018_data = statcast_pitcher(start_date, end_date, player_id=duffy_mlbam_id)
# 4. Filter to strikeouts, group by game date, count strikeouts per game
duffy_2018_so = duffy_2018_data[duffy_2018_data['events'] == 'strikeout']
so_by_game = duffy_2018_so.groupby('game_date').size()
# 5. Calculate cumulative sum of strikeouts and plot 
cumulative_so = so_by_game.cumsum()

plt.figure(figsize=(12,8))  
plt.plot(cumulative_so.index, cumulative_so)
plt.xlabel('Game Date') 
plt.ylabel('Total Strikeouts')
plt.title(""Danny Duffy's Cumulative Strikeouts in 2018"")
plt.show()

print(f""This plot shows Danny Duffy's cumulative strikeout total over the course of the 2018 season. He finished the season with {cumulative_so.iloc[-1]} total strikeouts."")","Text between the <statcast_pitcher_documentation></statcast_pitcher_documentation> tags is documentation for the statcast_pitcher library.  Consult this section to confirm which attributes to pass into the statcast_pitcher library.
<statcast_pitcher_documentation>
# Statcast Pitcher
`statcast_pitcher(start_dt=[yesterday's date], end_dt=None, player_id)`

The statcast function retrieves pitch-level statcast data for a given date or range or dates. 

## Arguments
`start_dt:` first day for which you want to retrieve data. Defaults to yesterday's date if nothing is entered. If you only want data for one date, supply a `start_dt` value but not an `end_dt` value. Format: YYYY-MM-DD. 

`end_dt:` last day for which you want to retrieve data. Defaults to None. If you want to retrieve data for more than one day, both a `start_dt` and `end_dt` value must be given. Format: YYYY-MM-DD. 

`player_id:` MLBAM player ID for the pitcher you want to retrieve data for. To find a player's MLBAM ID, see the function [playerid_lookup](http://github.com/jldbc/pybaseball/docs/playerid_lookup.md) or the examples below. 

### A note on data availability 
The earliest available statcast data comes from the 2008 season when the system was first introduced to Major League Baseball. Queries before this year will not work. Further, some features were introduced after the 2008 season. Launch speed angle, for example, is only available from the 2015 season forward. 

### Known issue
In rare cases where a player has seen greater than 30,000 pitches over the time period specified in your query, only the first 30,000 of these plays will be returned. There is a fix in the works for this

## Examples of valid queries

```python
from pybaseball import statcast_pitcher
from pybaseball import playerid_lookup

# find Chris Sale's player id (mlbam_key)
playerid_lookup('sale','chris')

# get all available data
data = statcast_pitcher('2008-04-01', '2017-07-15', player_id = 519242)

# get data for July 15th, 2017
data = statcast_pitcher('2017-07-15','2017-07-15', player_id = 519242)
```
</statcast_pitcher_documentation>
Text between the <playerid_lookup_documentation></playerid_lookup_documentation> tags is documentation for the playerid_lookup library.  Consult this section to confirm which attributes to pass into the playerid_lookup library.
<playerid_lookup_documentation>
# Player ID Lookup

## Single Player Lookup

`playerid_lookup(last, first=None, fuzzy=False)`

Look up a player's MLBAM, Retrosheet, FanGraphs, and Baseball Reference ID by name.

## Arguments
`last:` String. The player's last name. Case insensitive.

`first:` String. Optional. The player's first name. Case insensitive.

`fuzzy:` Boolean. Optional. Search for inexact name matches, the 5 closest will be returned.

Providing last name only will return all available id data for players with that last name (this will return several rows for a common last name like Jones, for example.) If multiple players exist for a (last name, first name) pair, you can figure out who's who by seeing their first and last years of play in the fields `mlb_played_first` and `mlb_played_last`.

This data comes from Chadwick Bureau, meaning that there are several people in this data who are not MLB players. For this reason, supplying both last and first name is recommended to narrow your search. 

## Examples of valid queries

```python
from pybaseball import playerid_lookup

# find the ids of all players with last name Jones (returns 1,314 rows)
data = playerid_lookup('jones')

# only return the ids of chipper jones (returns one row)
data = playerid_lookup('jones','chipper')

# Will return all players named Pedro Martinez (returns *2* rows)
data = playerid_lookup(""martinez"", ""pedro"", fuzzy=True)

# Will return the 5 closest names to ""yadi molina"" (returns 5 rows)
# First row will be Yadier Molina
data = playerid_lookup(""molina"", ""yadi"", fuzzy=True)
```

## List Lookup

`player_search_list(player_list)`

Look up a list of player ID's by name, return a data frame of all players

`player_list:` List. A list of tuples, of the form `(last, first)`. Case Insensitive.

Sources are the same as those used in the above `playerid_lookup` function. Queries for this function must be exact name matches.

## Examples of valid queries

```python

from pybaseball import player_search_list

# Will return the ids for both Lou Brock and Chipper Jones (returns 2 rows)
data = player_search_list([(""brock"",""lou""), (""jones"",""chipper"")])

```
</playerid_lookup_documentation>
"
plot the cumulative sum of total walks thrown by Shane Bieber in the 2020 season.,"1. Import the statcast_pitcher and playerid_lookup functions from pybaseball, as well as datetime for date handling and matplotlib for plotting:

```python
from pybaseball import statcast_pitcher, playerid_lookup
from datetime import datetime
import matplotlib.pyplot as plt
```

2. Look up Shane Bieber's MLBAM player ID. Handle the case where there may be multiple Shane Biebers by taking the most recent one based on mlb_played_last:

```python
bieber_id = playerid_lookup('bieber', 'shane')
bieber_id = bieber_id[bieber_id['mlb_played_last'] == bieber_id['mlb_played_last'].max()]
bieber_mlbam_id = bieber_id.loc[0,'key_mlbam']
```

3. Get Shane Bieber's statcast pitching data for the 2020 season. Convert the start and end dates to datetime objects:

```python
start_date = datetime(2020, 1, 1)
end_date = datetime(2020, 12, 31)
bieber_2020_data = statcast_pitcher(start_date, end_date, player_id=bieber_mlbam_id)
```

4. Filter to just walks, group by game date, and count the walks for each game:

```python
bieber_2020_walks = bieber_2020_data[bieber_2020_data['events'] == 'walk']
walks_by_game = bieber_2020_walks.groupby('game_date').size()
```

5. Calculate the cumulative sum of walks and plot it:

```python
cumulative_walks = walks_by_game.cumsum()

plt.figure(figsize=(12,8))
plt.plot(cumulative_walks.index, cumulative_walks)
plt.xlabel('Game Date')
plt.ylabel('Total Walks')
plt.title(f""Shane Bieber's Cumulative Walks in 2020"")
plt.show()
```","# 1. Import necessary libraries
from pybaseball import statcast_pitcher, playerid_lookup
from datetime import datetime 
import matplotlib.pyplot as plt
# 2. Look up Shane Bieber's player ID 
bieber_id = playerid_lookup('bieber', 'shane')

# Handle multiple players with same name by taking most recent
bieber_id = bieber_id[bieber_id['mlb_played_last'] == bieber_id['mlb_played_last'].max()]
bieber_mlbam_id = bieber_id.loc[0,'key_mlbam']

print(f""Shane Bieber's MLBAM ID is: {bieber_mlbam_id}"")
start_date = datetime(2020, 1, 1).strftime('%Y-%m-%d')
end_date = datetime(2020, 12, 31).strftime('%Y-%m-%d')
bieber_2020_data = statcast_pitcher(start_date, end_date, player_id=bieber_mlbam_id)
# 4. Filter to walks, group by game date, count walks per game
bieber_2020_walks = bieber_2020_data[bieber_2020_data['events'] == 'walk'] 
walks_by_game = bieber_2020_walks.groupby('game_date').size()
# 5. Calculate cumulative walks and plot
cumulative_walks = walks_by_game.cumsum()

plt.figure(figsize=(12,8))
plt.plot(cumulative_walks.index, cumulative_walks)
plt.xlabel('Game Date')
plt.ylabel('Total Walks') 
plt.title(""Shane Bieber's Cumulative Walks in 2020"")
plt.show()

print(""This plot shows Shane Bieber's cumulative walk total over the 2020 season. He finished with"", cumulative_walks.iloc[-1], ""total walks."")","Text between the <statcast_pitcher_documentation></statcast_pitcher_documentation> tags is documentation for the statcast_pitcher library.  Consult this section to confirm which attributes to pass into the statcast_pitcher library.
<statcast_pitcher_documentation>
# Statcast Pitcher
`statcast_pitcher(start_dt=[yesterday's date], end_dt=None, player_id)`

The statcast function retrieves pitch-level statcast data for a given date or range or dates. 

## Arguments
`start_dt:` first day for which you want to retrieve data. Defaults to yesterday's date if nothing is entered. If you only want data for one date, supply a `start_dt` value but not an `end_dt` value. Format: YYYY-MM-DD. 

`end_dt:` last day for which you want to retrieve data. Defaults to None. If you want to retrieve data for more than one day, both a `start_dt` and `end_dt` value must be given. Format: YYYY-MM-DD. 

`player_id:` MLBAM player ID for the pitcher you want to retrieve data for. To find a player's MLBAM ID, see the function [playerid_lookup](http://github.com/jldbc/pybaseball/docs/playerid_lookup.md) or the examples below. 

### A note on data availability 
The earliest available statcast data comes from the 2008 season when the system was first introduced to Major League Baseball. Queries before this year will not work. Further, some features were introduced after the 2008 season. Launch speed angle, for example, is only available from the 2015 season forward. 

### Known issue
In rare cases where a player has seen greater than 30,000 pitches over the time period specified in your query, only the first 30,000 of these plays will be returned. There is a fix in the works for this

## Examples of valid queries

```python
from pybaseball import statcast_pitcher
from pybaseball import playerid_lookup

# find Chris Sale's player id (mlbam_key)
playerid_lookup('sale','chris')

# get all available data
data = statcast_pitcher('2008-04-01', '2017-07-15', player_id = 519242)

# get data for July 15th, 2017
data = statcast_pitcher('2017-07-15','2017-07-15', player_id = 519242)
```
</statcast_pitcher_documentation>
Text between the <playerid_lookup_documentation></playerid_lookup_documentation> tags is documentation for the playerid_lookup library.  Consult this section to confirm which attributes to pass into the playerid_lookup library.
<playerid_lookup_documentation>
# Player ID Lookup

## Single Player Lookup

`playerid_lookup(last, first=None, fuzzy=False)`

Look up a player's MLBAM, Retrosheet, FanGraphs, and Baseball Reference ID by name.

## Arguments
`last:` String. The player's last name. Case insensitive.

`first:` String. Optional. The player's first name. Case insensitive.

`fuzzy:` Boolean. Optional. Search for inexact name matches, the 5 closest will be returned.

Providing last name only will return all available id data for players with that last name (this will return several rows for a common last name like Jones, for example.) If multiple players exist for a (last name, first name) pair, you can figure out who's who by seeing their first and last years of play in the fields `mlb_played_first` and `mlb_played_last`.

This data comes from Chadwick Bureau, meaning that there are several people in this data who are not MLB players. For this reason, supplying both last and first name is recommended to narrow your search. 

## Examples of valid queries

```python
from pybaseball import playerid_lookup

# find the ids of all players with last name Jones (returns 1,314 rows)
data = playerid_lookup('jones')

# only return the ids of chipper jones (returns one row)
data = playerid_lookup('jones','chipper')

# Will return all players named Pedro Martinez (returns *2* rows)
data = playerid_lookup(""martinez"", ""pedro"", fuzzy=True)

# Will return the 5 closest names to ""yadi molina"" (returns 5 rows)
# First row will be Yadier Molina
data = playerid_lookup(""molina"", ""yadi"", fuzzy=True)
```

## List Lookup

`player_search_list(player_list)`

Look up a list of player ID's by name, return a data frame of all players

`player_list:` List. A list of tuples, of the form `(last, first)`. Case Insensitive.

Sources are the same as those used in the above `playerid_lookup` function. Queries for this function must be exact name matches.

## Examples of valid queries

```python

from pybaseball import player_search_list

# Will return the ids for both Lou Brock and Chipper Jones (returns 2 rows)
data = player_search_list([(""brock"",""lou""), (""jones"",""chipper"")])

```
</playerid_lookup_documentation>
"
Consider the first week of August 2020 - find the names of 3 pitchers who's curveballs were most similar to Max Scherzer's.,"1. Import the statcast, statcast_pitcher, and playerid_lookup functions from pybaseball:

```python
from pybaseball import statcast, statcast_pitcher, playerid_lookup
```

2. Define the start and end dates for the first week of August 2020: 

```python
start_date = '2020-08-01'
end_date = '2020-08-07' 
```

3. Look up Max Scherzer's MLBAM ID:

```python
scherzer_id = playerid_lookup('scherzer','max').key_mlbam.iloc[0]
```

4. Get Scherzer's statcast pitching data for the time period and filter to only curveballs:

```python
scherzer_data = statcast_pitcher(start_date, end_date, player_id=scherzer_id)  
scherzer_curves = scherzer_data[scherzer_data.pitch_type == 'CU']
```

5. Get statcast pitching data for all pitchers in that time period and filter to curveballs: 

```python
all_data = statcast(start_date, end_date, type='pitcher')
all_curves = all_data[all_data.pitch_type == 'CU'] 
```

6. For each pitcher, calculate the average velocity, spin rate, horizontal movement, and vertical movement of their curveballs. Store these averages in a vector for each pitcher.

7. Train a KNN model on the average curveball vectors for each pitcher. 

8. Calculate Scherzer's average curveball vector using the same metrics.

9. Use the trained KNN model to find the 3 nearest neighbors to Scherzer's average curveball vector. 

10. Print out the names of the 3 pitchers that the model identifies as having the most similar curveballs to Scherzer in that time period.

Are you satisfied with this plan?","# Import necessary pybaseball functions
from pybaseball import statcast, statcast_pitcher, playerid_lookup
# Define date range 
start_date = '2020-08-01'
end_date = '2020-08-07'
# Look up Max Scherzer's MLBAM ID
scherzer_id = playerid_lookup('scherzer','max').key_mlbam.iloc[0]
print(f""Max Scherzer's MLBAM ID is: {scherzer_id}"")
# Get Scherzer's statcast pitching data and filter to curveballs
scherzer_data = statcast_pitcher(start_date, end_date, player_id=scherzer_id)  
scherzer_curves = scherzer_data[scherzer_data.pitch_type == 'CU']
print(f""Found {len(scherzer_curves)} Scherzer curveballs in this time period"")
# Get statcast data for all pitchers and filter to curveballs  
all_data = statcast(start_date, end_date)
all_curves = all_data[all_data.pitch_type == 'CU']  
print(f""Found {len(all_curves)} total curveballs thrown by all pitchers in this period"")
import pandas as pd

# Calculate average curveball metrics for each pitcher
pitcher_averages = all_curves.groupby('pitcher')[['release_speed', 'release_spin_rate', 'pfx_x', 'pfx_z']].mean()

print(f""Calculated average curveball metrics for {len(pitcher_averages)} pitchers"")

# Calculate average curveball metrics for Scherzer  
scherzer_avg = scherzer_curves[['release_speed', 'release_spin_rate', 'pfx_x', 'pfx_z']].mean()

print(""Scherzer's average curveball metrics:"")
print(scherzer_avg)
from sklearn.neighbors import NearestNeighbors

# Create and train a KNN model
model = NearestNeighbors(n_neighbors=3)  
model.fit(pitcher_averages)

# Find the 3 pitchers most similar to Scherzer
distances, indices = model.kneighbors([scherzer_avg])

# Get the names of those pitchers
similar_pitchers = pitcher_averages.iloc[indices[0]].index

print(""The 3 pitchers with the most similar curveballs to Scherzer in this period were:"")
for pitcher in similar_pitchers:
    print(pitcher)
from pybaseball import playerid_reverse_lookup

print(""The 3 pitchers with the most similar curveballs to Scherzer in this period were:"")
for pitcher_id in similar_pitchers:
    player_info = playerid_reverse_lookup([pitcher_id]).iloc[0]  
    name = player_info['name_first'] + ' ' + player_info['name_last']
    print(name)","Text between the <statcast_documentation></statcast_documentation> tags is documentation for the statcast library.  Consult this section to confirm which attributes to pass into the statcast library.
<statcast_documentation>
# Statcast
`statcast(start_dt=[yesterday's date], end_dt=None, team=None, verbose=True, parallel=True)`

The `statcast` function retrieves pitch-level statcast data for a given date or range or dates. 

## Returned data
This function returns a pandas `DataFrame` with one entry for each pitch in the
query. The data returned for each pitch is explained on
[Baseball Savant](https://baseballsavant.mlb.com/csv-docs).

## Arguments
`start_dt:` first day for which you want to retrieve data. Defaults to yesterday's date if nothing is entered. If you only want data for one date, supply a `start_dt` value but not an `end_dt` value. Format: YYYY-MM-DD. 

`end_dt:` last day for which you want to retrieve data. Defaults to None. If you want to retrieve data for more than one day, both a `start_dt` and `end_dt` value must be given. Format: YYYY-MM-DD. 

`team:` optional. If you only want statcast data for one team, supply that team's abbreviation here (i.e. BOS, SEA, NYY, etc).

`verbose:` Boolean, default=True. If set to True this will provide updates on query progress, if set to False it will not. 

`parallel:` Boolean, default=True. Whether to parallelize HTTP requests in large queries.

### A note on data availability 
The earliest available statcast data comes from the 2008 season when the system was first introduced to Major League Baseball. Queries before this year will not work. Further, some features were introduced after the 2008 season. Launch speed angle, for example, is only available from the 2015 season forward. 

### A note on query time
Baseball savant limits queries to 30000 rows each. For this reason, if your request is for a period of greater than 5 days, it will be broken into two or more smaller requests. The data will still be returned to you in a single dataframe, but it will take slightly longer. 

### A note on parallelization
Large queries with requests made in parallel complete substantially faster. This option exists to accommodate compute environments where multiprocessing is disabled (e.g. some AWS Lambda environments).

## Examples of valid queries

```python
from pybaseball import statcast

# get all statcast data for July 4th, 2017
data = statcast('2017-07-04')

#get data for the first seven days of August in 2016
data = statcast('2016-08-01', '2016-08-07')

#get all data for the Texas Rangers in the 2016 season
data = statcast('2016-04-01', '2016-10-30', team='TEX')

# get data for yesterday
data = statcast()```

</statcast_documentation>
Text between the <statcast_pitcher_documentation></statcast_pitcher_documentation> tags is documentation for the statcast_pitcher library.  Consult this section to confirm which attributes to pass into the statcast_pitcher library.
<statcast_pitcher_documentation>
# Statcast Pitcher
`statcast_pitcher(start_dt=[yesterday's date], end_dt=None, player_id)`

The statcast function retrieves pitch-level statcast data for a given date or range or dates. 

## Arguments
`start_dt:` first day for which you want to retrieve data. Defaults to yesterday's date if nothing is entered. If you only want data for one date, supply a `start_dt` value but not an `end_dt` value. Format: YYYY-MM-DD. 

`end_dt:` last day for which you want to retrieve data. Defaults to None. If you want to retrieve data for more than one day, both a `start_dt` and `end_dt` value must be given. Format: YYYY-MM-DD. 

`player_id:` MLBAM player ID for the pitcher you want to retrieve data for. To find a player's MLBAM ID, see the function [playerid_lookup](http://github.com/jldbc/pybaseball/docs/playerid_lookup.md) or the examples below. 

### A note on data availability 
The earliest available statcast data comes from the 2008 season when the system was first introduced to Major League Baseball. Queries before this year will not work. Further, some features were introduced after the 2008 season. Launch speed angle, for example, is only available from the 2015 season forward. 

### Known issue
In rare cases where a player has seen greater than 30,000 pitches over the time period specified in your query, only the first 30,000 of these plays will be returned. There is a fix in the works for this

## Examples of valid queries

```python
from pybaseball import statcast_pitcher
from pybaseball import playerid_lookup

# find Chris Sale's player id (mlbam_key)
playerid_lookup('sale','chris')

# get all available data
data = statcast_pitcher('2008-04-01', '2017-07-15', player_id = 519242)

# get data for July 15th, 2017
data = statcast_pitcher('2017-07-15','2017-07-15', player_id = 519242)
```
</statcast_pitcher_documentation>
Text between the <playerid_lookup_documentation></playerid_lookup_documentation> tags is documentation for the playerid_lookup library.  Consult this section to confirm which attributes to pass into the playerid_lookup library.
<playerid_lookup_documentation>
# Player ID Lookup

## Single Player Lookup

`playerid_lookup(last, first=None, fuzzy=False)`

Look up a player's MLBAM, Retrosheet, FanGraphs, and Baseball Reference ID by name.

## Arguments
`last:` String. The player's last name. Case insensitive.

`first:` String. Optional. The player's first name. Case insensitive.

`fuzzy:` Boolean. Optional. Search for inexact name matches, the 5 closest will be returned.

Providing last name only will return all available id data for players with that last name (this will return several rows for a common last name like Jones, for example.) If multiple players exist for a (last name, first name) pair, you can figure out who's who by seeing their first and last years of play in the fields `mlb_played_first` and `mlb_played_last`.

This data comes from Chadwick Bureau, meaning that there are several people in this data who are not MLB players. For this reason, supplying both last and first name is recommended to narrow your search. 

## Examples of valid queries

```python
from pybaseball import playerid_lookup

# find the ids of all players with last name Jones (returns 1,314 rows)
data = playerid_lookup('jones')

# only return the ids of chipper jones (returns one row)
data = playerid_lookup('jones','chipper')

# Will return all players named Pedro Martinez (returns *2* rows)
data = playerid_lookup(""martinez"", ""pedro"", fuzzy=True)

# Will return the 5 closest names to ""yadi molina"" (returns 5 rows)
# First row will be Yadier Molina
data = playerid_lookup(""molina"", ""yadi"", fuzzy=True)
```

## List Lookup

`player_search_list(player_list)`

Look up a list of player ID's by name, return a data frame of all players

`player_list:` List. A list of tuples, of the form `(last, first)`. Case Insensitive.

Sources are the same as those used in the above `playerid_lookup` function. Queries for this function must be exact name matches.

## Examples of valid queries

```python

from pybaseball import player_search_list

# Will return the ids for both Lou Brock and Chipper Jones (returns 2 rows)
data = player_search_list([(""brock"",""lou""), (""jones"",""chipper"")])

```
</playerid_lookup_documentation>
"
Consider the first week of June 2019 - find 3 pitchers who's changeups were most similar to Justin Verlander's,"1. Import the statcast, statcast_pitcher, and playerid_lookup functions from pybaseball:

```python
from pybaseball import statcast, statcast_pitcher, playerid_lookup
```

2. Define the start and end dates for the first week of June 2019:

```python 
start_date = '2019-06-01'
end_date = '2019-06-07'
```

3. Look up Justin Verlander's MLBAM ID:

```python
verlander_id = playerid_lookup('verlander', 'justin').key_mlbam.iloc[0]
```

4. Get Verlander's statcast pitching data for the time period and filter to only changeups:

```python
verlander_data = statcast_pitcher(start_date, end_date, player_id=verlander_id)
verlander_changes = verlander_data[verlander_data.pitch_type == 'CH']
```

5. Get statcast pitching data for all pitchers in that time period and filter to changeups:

```python
all_data = statcast(start_date, end_date, type='pitcher') 
all_changes = all_data[all_data.pitch_type == 'CH']
```

6. For each pitcher, calculate the average velocity, spin rate, horizontal movement, and vertical movement of their changeups. Store these averages in a vector for each pitcher.

7. Train a KNN model on the average changeup vectors for each pitcher.

8. Calculate Verlander's average changeup vector using the same metrics. 

9. Use the trained KNN model to find the 3 nearest neighbors to Verlander's average changeup vector.

10. Print out the names of the 3 pitchers that the model identifies as having the most similar changeups to Verlander in that time period.","# Import required libraries
from pybaseball import statcast, statcast_pitcher, playerid_lookup
import pandas as pd
from sklearn.neighbors import NearestNeighbors
start_date = '2019-06-01' 
end_date = '2019-06-07'
verlander_id = playerid_lookup('verlander', 'justin').key_mlbam.iloc[0]
print(f""Justin Verlander's player ID is: {verlander_id}"")
verlander_data = statcast_pitcher(start_date, end_date, player_id=verlander_id)
verlander_changes = verlander_data[verlander_data.pitch_type == 'CH']
print(f""Found {len(verlander_changes)} changeups for Verlander in this period"")
all_data = statcast(start_date, end_date)  
all_changes = all_data[all_data.pitch_type == 'CH']
print(f""Found {len(all_changes)} total changeups in this period"")
pitcher_averages = all_changes.groupby('pitcher')[['release_speed', 'release_spin_rate', 'pfx_x', 'pfx_z']].mean()
print(f""Calculated average changeup metrics for {len(pitcher_averages)} pitchers"")
verlander_avg = verlander_changes[['release_speed', 'release_spin_rate', 'pfx_x', 'pfx_z']].mean()
print(""Verlander's average changeup metrics:"")
print(verlander_avg)
model = NearestNeighbors(n_neighbors=3)
model.fit(pitcher_averages)

distances, indices = model.kneighbors([verlander_avg])

similar_pitchers = pitcher_averages.iloc[indices[0]].index

print(""The 3 pitchers with changeups most similar to Verlander in this period were:"")
for pitcher in similar_pitchers:
    print(pitcher)
from pybaseball import playerid_reverse_lookup

print(""The 3 pitchers with changeups most similar to Verlander in this period were:"") 
for pitcher_id in similar_pitchers:
    player_info = playerid_reverse_lookup([pitcher_id]).iloc[0]
    name = player_info['name_first'] + ' ' + player_info['name_last']
    print(name)","Text between the <statcast_documentation></statcast_documentation> tags is documentation for the statcast library.  Consult this section to confirm which attributes to pass into the statcast library.
<statcast_documentation>
# Statcast
`statcast(start_dt=[yesterday's date], end_dt=None, team=None, verbose=True, parallel=True)`

The `statcast` function retrieves pitch-level statcast data for a given date or range or dates. 

## Returned data
This function returns a pandas `DataFrame` with one entry for each pitch in the
query. The data returned for each pitch is explained on
[Baseball Savant](https://baseballsavant.mlb.com/csv-docs).

## Arguments
`start_dt:` first day for which you want to retrieve data. Defaults to yesterday's date if nothing is entered. If you only want data for one date, supply a `start_dt` value but not an `end_dt` value. Format: YYYY-MM-DD. 

`end_dt:` last day for which you want to retrieve data. Defaults to None. If you want to retrieve data for more than one day, both a `start_dt` and `end_dt` value must be given. Format: YYYY-MM-DD. 

`team:` optional. If you only want statcast data for one team, supply that team's abbreviation here (i.e. BOS, SEA, NYY, etc).

`verbose:` Boolean, default=True. If set to True this will provide updates on query progress, if set to False it will not. 

`parallel:` Boolean, default=True. Whether to parallelize HTTP requests in large queries.

### A note on data availability 
The earliest available statcast data comes from the 2008 season when the system was first introduced to Major League Baseball. Queries before this year will not work. Further, some features were introduced after the 2008 season. Launch speed angle, for example, is only available from the 2015 season forward. 

### A note on query time
Baseball savant limits queries to 30000 rows each. For this reason, if your request is for a period of greater than 5 days, it will be broken into two or more smaller requests. The data will still be returned to you in a single dataframe, but it will take slightly longer. 

### A note on parallelization
Large queries with requests made in parallel complete substantially faster. This option exists to accommodate compute environments where multiprocessing is disabled (e.g. some AWS Lambda environments).

## Examples of valid queries

```python
from pybaseball import statcast

# get all statcast data for July 4th, 2017
data = statcast('2017-07-04')

#get data for the first seven days of August in 2016
data = statcast('2016-08-01', '2016-08-07')

#get all data for the Texas Rangers in the 2016 season
data = statcast('2016-04-01', '2016-10-30', team='TEX')

# get data for yesterday
data = statcast()```

</statcast_documentation>
Text between the <statcast_pitcher_documentation></statcast_pitcher_documentation> tags is documentation for the statcast_pitcher library.  Consult this section to confirm which attributes to pass into the statcast_pitcher library.
<statcast_pitcher_documentation>
# Statcast Pitcher
`statcast_pitcher(start_dt=[yesterday's date], end_dt=None, player_id)`

The statcast function retrieves pitch-level statcast data for a given date or range or dates. 

## Arguments
`start_dt:` first day for which you want to retrieve data. Defaults to yesterday's date if nothing is entered. If you only want data for one date, supply a `start_dt` value but not an `end_dt` value. Format: YYYY-MM-DD. 

`end_dt:` last day for which you want to retrieve data. Defaults to None. If you want to retrieve data for more than one day, both a `start_dt` and `end_dt` value must be given. Format: YYYY-MM-DD. 

`player_id:` MLBAM player ID for the pitcher you want to retrieve data for. To find a player's MLBAM ID, see the function [playerid_lookup](http://github.com/jldbc/pybaseball/docs/playerid_lookup.md) or the examples below. 

### A note on data availability 
The earliest available statcast data comes from the 2008 season when the system was first introduced to Major League Baseball. Queries before this year will not work. Further, some features were introduced after the 2008 season. Launch speed angle, for example, is only available from the 2015 season forward. 

### Known issue
In rare cases where a player has seen greater than 30,000 pitches over the time period specified in your query, only the first 30,000 of these plays will be returned. There is a fix in the works for this

## Examples of valid queries

```python
from pybaseball import statcast_pitcher
from pybaseball import playerid_lookup

# find Chris Sale's player id (mlbam_key)
playerid_lookup('sale','chris')

# get all available data
data = statcast_pitcher('2008-04-01', '2017-07-15', player_id = 519242)

# get data for July 15th, 2017
data = statcast_pitcher('2017-07-15','2017-07-15', player_id = 519242)
```
</statcast_pitcher_documentation>
Text between the <playerid_lookup_documentation></playerid_lookup_documentation> tags is documentation for the playerid_lookup library.  Consult this section to confirm which attributes to pass into the playerid_lookup library.
<playerid_lookup_documentation>
# Player ID Lookup

## Single Player Lookup

`playerid_lookup(last, first=None, fuzzy=False)`

Look up a player's MLBAM, Retrosheet, FanGraphs, and Baseball Reference ID by name.

## Arguments
`last:` String. The player's last name. Case insensitive.

`first:` String. Optional. The player's first name. Case insensitive.

`fuzzy:` Boolean. Optional. Search for inexact name matches, the 5 closest will be returned.

Providing last name only will return all available id data for players with that last name (this will return several rows for a common last name like Jones, for example.) If multiple players exist for a (last name, first name) pair, you can figure out who's who by seeing their first and last years of play in the fields `mlb_played_first` and `mlb_played_last`.

This data comes from Chadwick Bureau, meaning that there are several people in this data who are not MLB players. For this reason, supplying both last and first name is recommended to narrow your search. 

## Examples of valid queries

```python
from pybaseball import playerid_lookup

# find the ids of all players with last name Jones (returns 1,314 rows)
data = playerid_lookup('jones')

# only return the ids of chipper jones (returns one row)
data = playerid_lookup('jones','chipper')

# Will return all players named Pedro Martinez (returns *2* rows)
data = playerid_lookup(""martinez"", ""pedro"", fuzzy=True)

# Will return the 5 closest names to ""yadi molina"" (returns 5 rows)
# First row will be Yadier Molina
data = playerid_lookup(""molina"", ""yadi"", fuzzy=True)
```

## List Lookup

`player_search_list(player_list)`

Look up a list of player ID's by name, return a data frame of all players

`player_list:` List. A list of tuples, of the form `(last, first)`. Case Insensitive.

Sources are the same as those used in the above `playerid_lookup` function. Queries for this function must be exact name matches.

## Examples of valid queries

```python

from pybaseball import player_search_list

# Will return the ids for both Lou Brock and Chipper Jones (returns 2 rows)
data = player_search_list([(""brock"",""lou""), (""jones"",""chipper"")])

```
</playerid_lookup_documentation>
"
