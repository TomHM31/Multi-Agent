task,plan,code,function_detail
How many games did the Rays win in 2022?,"1. Import the schedule_and_record function from pybaseball:

```python
from pybaseball import schedule_and_record
```

2. Get the 2022 schedule and results for the Tampa Bay Rays:

```python
rays_2022 = schedule_and_record(2022, 'TB')
```

3. Filter the dataframe to games where the Rays won (W/L == 'W') or had a walk-off win (W/L == 'W-wo'):

```python
rays_wins = rays_2022[(rays_2022['W/L'] == 'W') | (rays_2022['W/L'] == 'W-wo')]
```

4. Count the number of rows (games won) in the filtered dataframe:

```python
num_wins = len(rays_wins)
print(f""The Tampa Bay Rays won {num_wins} games in 2022."")
```","# 1. Import the schedule_and_record function from pybaseball
from pybaseball import schedule_and_record
# 2. Get the 2022 schedule and results for the Tampa Bay Rays
rays_2022 = schedule_and_record(2022, 'TB')
# 3. Filter the dataframe to games where the Rays won (W/L == 'W') or had a walk-off win (W/L == 'W-wo')
rays_wins = rays_2022[(rays_2022['W/L'] == 'W') | (rays_2022['W/L'] == 'W-wo')]
# 4. Count the number of rows (games won) in the filtered dataframe
num_wins = len(rays_wins)
print(f""The Tampa Bay Rays won {num_wins} games in 2022."")",seed_function_detail
How many home runs did Derek Jeter hit in 2008?,"1. Import the statcast_batter and playerid_lookup functions from pybaseball:

```python
from pybaseball import statcast_batter, playerid_lookup 
```

2. Look up Derek Jeter's MLBAM player ID:

```python 
jeter_id = playerid_lookup('jeter', 'derek')
jeter_mlbam_id = jeter_id.iloc[0].key_mlbam  
```

3. Get Derek Jeter's statcast batting data for the 2008 season:

```python
jeter_2008 = statcast_batter('2008-01-01', '2008-12-31', player_id=jeter_mlbam_id)
```

4. Filter to only pitches that resulted in home runs:

```python
jeter_2008_hr = jeter_2008[jeter_2008.events == 'home_run']
```

5. Count the number of home runs:

```python
num_hr = len(jeter_2008_hr)
print(f""Derek Jeter hit {num_hr} home runs in the 2008 season."")
```","# Check if pybaseball is installed and imported
import pybaseball
print(""pybaseball library imported successfully"")
from pybaseball import playerid_lookup

# Look up Derek Jeter's MLBAM player ID 
jeter_id = playerid_lookup('jeter', 'derek')
jeter_mlbam_id = jeter_id.iloc[0].key_mlbam
print(f""Derek Jeter's MLBAM player ID is: {jeter_mlbam_id}"")
from pybaseball import statcast_batter

# Get Derek Jeter's statcast batting data for the 2008 season
jeter_2008 = statcast_batter('2008-01-01', '2008-12-31', player_id=jeter_mlbam_id)
print(jeter_2008.head())
# Filter to only pitches that resulted in home runs
jeter_2008_hr = jeter_2008[jeter_2008.events == 'home_run'] 
print(jeter_2008_hr.head())
# Count the number of home runs
num_hr = len(jeter_2008_hr)
print(f""Derek Jeter hit {num_hr} home runs in the 2008 season."")","Text between the <statcast_batter_documentation></statcast_batter_documentation> tags is documentation for the statcast_batter library.  Consult this section to confirm which attributes to pass into the statcast_batter library.
<statcast_batter_documentation>
# Statcast Batter
`statcast_batter(start_dt=[yesterday's date], end_dt=None, player_id)`

The statcast function retrieves pitch-level statcast data for a given date or range or dates. 

## Arguments
`start_dt:` first day for which you want to retrieve data. Defaults to yesterday's date if nothing is entered. If you only want data for one date, supply a `start_dt` value but not an `end_dt` value. Format: YYYY-MM-DD. 

`end_dt:` last day for which you want to retrieve data. Defaults to None. If you want to retrieve data for more than one day, both a `start_dt` and `end_dt` value must be given. Format: YYYY-MM-DD. 

`player_id:` MLBAM player ID for the player you want to retrieve data for. To find a player's MLBAM ID, see the function [playerid_lookup](http://github.com/jldbc/pybaseball/docs/playerid_lookup.md) or the examples below. 

### A note on data availability 
The earliest available statcast data comes from the 2008 season when the system was first introduced to Major League Baseball. Queries before this year will not work. Further, some features were introduced after the 2008 season. Launch speed angle, for example, is only available from the 2015 season forward. 

## Examples of valid queries

```python
from pybaseball import statcast_batter
from pybaseball import playerid_lookup

# find David Ortiz's player id (mlbam_key)
playerid_lookup('ortiz','david')

# get all available data
data = statcast_batter('2008-04-01', '2017-07-15', player_id = 120074)

# get data for August 16th, 2014
data = statcast_batter('2014-08-16', player_id = 120074)
```

</statcast_batter_documentation>
Text between the <playerid_lookup_documentation></playerid_lookup_documentation> tags is documentation for the playerid_lookup library.  Consult this section to confirm which attributes to pass into the playerid_lookup library.
<playerid_lookup_documentation>
# Player ID Lookup

## Single Player Lookup

`playerid_lookup(last, first=None, fuzzy=False)`

Look up a player's MLBAM, Retrosheet, FanGraphs, and Baseball Reference ID by name.

## Arguments
`last:` String. The player's last name. Case insensitive.

`first:` String. Optional. The player's first name. Case insensitive.

`fuzzy:` Boolean. Optional. Search for inexact name matches, the 5 closest will be returned.

Providing last name only will return all available id data for players with that last name (this will return several rows for a common last name like Jones, for example.) If multiple players exist for a (last name, first name) pair, you can figure out who's who by seeing their first and last years of play in the fields `mlb_played_first` and `mlb_played_last`.

This data comes from Chadwick Bureau, meaning that there are several people in this data who are not MLB players. For this reason, supplying both last and first name is recommended to narrow your search. 

## Examples of valid queries

```python
from pybaseball import playerid_lookup

# find the ids of all players with last name Jones (returns 1,314 rows)
data = playerid_lookup('jones')

# only return the ids of chipper jones (returns one row)
data = playerid_lookup('jones','chipper')

# Will return all players named Pedro Martinez (returns *2* rows)
data = playerid_lookup(""martinez"", ""pedro"", fuzzy=True)

# Will return the 5 closest names to ""yadi molina"" (returns 5 rows)
# First row will be Yadier Molina
data = playerid_lookup(""molina"", ""yadi"", fuzzy=True)
```

## List Lookup

`player_search_list(player_list)`

Look up a list of player ID's by name, return a data frame of all players

`player_list:` List. A list of tuples, of the form `(last, first)`. Case Insensitive.

Sources are the same as those used in the above `playerid_lookup` function. Queries for this function must be exact name matches.

## Examples of valid queries

```python

from pybaseball import player_search_list

# Will return the ids for both Lou Brock and Chipper Jones (returns 2 rows)
data = player_search_list([(""brock"",""lou""), (""jones"",""chipper"")])

```
</playerid_lookup_documentation>
"
How many doubles did Whit Merrifield hit in 2019?,"1. Import the statcast_batter and playerid_lookup functions from pybaseball:

```python
from pybaseball import statcast_batter, playerid_lookup
```

2. Look up Whit Merrifield's MLBAM player ID:

```python
merrifield_id = playerid_lookup('merrifield', 'whit')
merrifield_mlbam_id = merrifield_id.iloc[0].key_mlbam
```

3. Get Whit Merrifield's statcast batting data for the 2019 season:

```python
merrifield_2019 = statcast_batter('2019-01-01', '2019-12-31', player_id=merrifield_mlbam_id)
```

4. Filter to only pitches that resulted in doubles:

```python
merrifield_2019_doubles = merrifield_2019[merrifield_2019.events == 'double']
```

5. Count the number of doubles:

```python
num_doubles = len(merrifield_2019_doubles)
print(f""Whit Merrifield hit {num_doubles} doubles in the 2019 season."")
```","# Check if pybaseball is installed and imported
try:
    import pybaseball
    print(""pybaseball library imported successfully"")
except ImportError:
    print(""pybaseball library is not installed. Please install it using 'pip install pybaseball' before proceeding."")
# Check if statcast_batter is imported from pybaseball
try:
    from pybaseball import statcast_batter
    print(""statcast_batter function imported successfully from pybaseball"")
except ImportError:
    print(""statcast_batter function is not imported. Please import it using 'from pybaseball import statcast_batter' before proceeding."")
# Check if the merrifield_2019 variable exists and contains data
try:
    print(merrifield_2019.head())
except NameError:
    print(""The merrifield_2019 variable is not defined. Make sure the code to retrieve Whit Merrifield's 2019 statcast batting data completed successfully in a previous step."")
# Check if the merrifield_mlbam_id variable exists
try:
    print(f""The value of merrifield_mlbam_id is: {merrifield_mlbam_id}"")
except NameError:
    print(""The merrifield_mlbam_id variable is not defined. Make sure the code to look up Whit Merrifield's MLBAM player ID completed successfully in a previous step."")
# Check if playerid_lookup is imported from pybaseball
try:
    from pybaseball import playerid_lookup
    print(""playerid_lookup function imported successfully from pybaseball"")
except ImportError:
    print(""playerid_lookup function is not imported. Please import it using 'from pybaseball import playerid_lookup' before proceeding."")
# Look up Whit Merrifield's MLBAM player ID
merrifield_id = playerid_lookup('merrifield', 'whit')
merrifield_mlbam_id = merrifield_id.iloc[0].key_mlbam
print(f""Whit Merrifield's MLBAM player ID is: {merrifield_mlbam_id}"")
# Get Whit Merrifield's statcast batting data for the 2019 season
merrifield_2019 = statcast_batter('2019-01-01', '2019-12-31', player_id=merrifield_mlbam_id)
print(merrifield_2019.head())
# Filter to only pitches that resulted in doubles
merrifield_2019_doubles = merrifield_2019[merrifield_2019.events == 'double'] 
print(merrifield_2019_doubles.head())
# Count the number of doubles
num_doubles = len(merrifield_2019_doubles)
print(f""Whit Merrifield hit {num_doubles} doubles in the 2019 season."")
# Import the statcast_batter and playerid_lookup functions from pybaseball
from pybaseball import statcast_batter, playerid_lookup

# Look up Whit Merrifield's MLBAM player ID
merrifield_id = playerid_lookup('merrifield', 'whit')
merrifield_mlbam_id = merrifield_id.iloc[0].key_mlbam

# Get Whit Merrifield's statcast batting data for the 2019 season
merrifield_2019 = statcast_batter('2019-01-01', '2019-12-31', player_id=merrifield_mlbam_id)

# Filter to only pitches that resulted in doubles
merrifield_2019_doubles = merrifield_2019[merrifield_2019.events == 'double']

# Count the number of doubles 
num_doubles = len(merrifield_2019_doubles)
print(f""Whit Merrifield hit {num_doubles} doubles in the 2019 season."")","Text between the <statcast_batter_documentation></statcast_batter_documentation> tags is documentation for the statcast_batter library.  Consult this section to confirm which attributes to pass into the statcast_batter library.
<statcast_batter_documentation>
# Statcast Batter
`statcast_batter(start_dt=[yesterday's date], end_dt=None, player_id)`

The statcast function retrieves pitch-level statcast data for a given date or range or dates. 

## Arguments
`start_dt:` first day for which you want to retrieve data. Defaults to yesterday's date if nothing is entered. If you only want data for one date, supply a `start_dt` value but not an `end_dt` value. Format: YYYY-MM-DD. 

`end_dt:` last day for which you want to retrieve data. Defaults to None. If you want to retrieve data for more than one day, both a `start_dt` and `end_dt` value must be given. Format: YYYY-MM-DD. 

`player_id:` MLBAM player ID for the player you want to retrieve data for. To find a player's MLBAM ID, see the function [playerid_lookup](http://github.com/jldbc/pybaseball/docs/playerid_lookup.md) or the examples below. 

### A note on data availability 
The earliest available statcast data comes from the 2008 season when the system was first introduced to Major League Baseball. Queries before this year will not work. Further, some features were introduced after the 2008 season. Launch speed angle, for example, is only available from the 2015 season forward. 

## Examples of valid queries

```python
from pybaseball import statcast_batter
from pybaseball import playerid_lookup

# find David Ortiz's player id (mlbam_key)
playerid_lookup('ortiz','david')

# get all available data
data = statcast_batter('2008-04-01', '2017-07-15', player_id = 120074)

# get data for August 16th, 2014
data = statcast_batter('2014-08-16', player_id = 120074)
```

</statcast_batter_documentation>
Text between the <playerid_lookup_documentation></playerid_lookup_documentation> tags is documentation for the playerid_lookup library.  Consult this section to confirm which attributes to pass into the playerid_lookup library.
<playerid_lookup_documentation>
# Player ID Lookup

## Single Player Lookup

`playerid_lookup(last, first=None, fuzzy=False)`

Look up a player's MLBAM, Retrosheet, FanGraphs, and Baseball Reference ID by name.

## Arguments
`last:` String. The player's last name. Case insensitive.

`first:` String. Optional. The player's first name. Case insensitive.

`fuzzy:` Boolean. Optional. Search for inexact name matches, the 5 closest will be returned.

Providing last name only will return all available id data for players with that last name (this will return several rows for a common last name like Jones, for example.) If multiple players exist for a (last name, first name) pair, you can figure out who's who by seeing their first and last years of play in the fields `mlb_played_first` and `mlb_played_last`.

This data comes from Chadwick Bureau, meaning that there are several people in this data who are not MLB players. For this reason, supplying both last and first name is recommended to narrow your search. 

## Examples of valid queries

```python
from pybaseball import playerid_lookup

# find the ids of all players with last name Jones (returns 1,314 rows)
data = playerid_lookup('jones')

# only return the ids of chipper jones (returns one row)
data = playerid_lookup('jones','chipper')

# Will return all players named Pedro Martinez (returns *2* rows)
data = playerid_lookup(""martinez"", ""pedro"", fuzzy=True)

# Will return the 5 closest names to ""yadi molina"" (returns 5 rows)
# First row will be Yadier Molina
data = playerid_lookup(""molina"", ""yadi"", fuzzy=True)
```

## List Lookup

`player_search_list(player_list)`

Look up a list of player ID's by name, return a data frame of all players

`player_list:` List. A list of tuples, of the form `(last, first)`. Case Insensitive.

Sources are the same as those used in the above `playerid_lookup` function. Queries for this function must be exact name matches.

## Examples of valid queries

```python

from pybaseball import player_search_list

# Will return the ids for both Lou Brock and Chipper Jones (returns 2 rows)
data = player_search_list([(""brock"",""lou""), (""jones"",""chipper"")])

```
</playerid_lookup_documentation>
"
