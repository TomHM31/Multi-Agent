task,plan,code,function_detail
How many games did the Rays win in 2022?,"1. Import the schedule_and_record function from pybaseball:

```python
from pybaseball import schedule_and_record
```

2. Get the 2022 schedule and results for the Tampa Bay Rays:

```python
rays_2022 = schedule_and_record(2022, 'TB')
```

3. Filter the dataframe to games where the Rays won (W/L == 'W') or had a walk-off win (W/L == 'W-wo'):

```python
rays_wins = rays_2022[(rays_2022['W/L'] == 'W') | (rays_2022['W/L'] == 'W-wo')]
```

4. Count the number of rows (games won) in the filtered dataframe:

```python
num_wins = len(rays_wins)
print(f""The Tampa Bay Rays won {num_wins} games in 2022."")
```","# 1. Import the schedule_and_record function from pybaseball
from pybaseball import schedule_and_record
# 2. Get the 2022 schedule and results for the Tampa Bay Rays
rays_2022 = schedule_and_record(2022, 'TB')
# 3. Filter the dataframe to games where the Rays won (W/L == 'W') or had a walk-off win (W/L == 'W-wo')
rays_wins = rays_2022[(rays_2022['W/L'] == 'W') | (rays_2022['W/L'] == 'W-wo')]
# 4. Count the number of rows (games won) in the filtered dataframe
num_wins = len(rays_wins)
print(f""The Tampa Bay Rays won {num_wins} games in 2022."")",seed_function_detail
How many home runs did Derek Jeter hit in 2008?,"1. Import the statcast_batter and playerid_lookup functions from pybaseball:

```python
from pybaseball import statcast_batter, playerid_lookup 
```

2. Look up Derek Jeter's MLBAM player ID:

```python
jeter_id = playerid_lookup('jeter', 'derek')  
jeter_mlbam_id = jeter_id.loc[0,'key_mlbam']
```

3. Get Derek Jeter's statcast batting data for the 2008 season:

```python 
jeter_2008_data = statcast_batter('2008-01-01', '2008-12-31', player_id=jeter_mlbam_id)
```

4. Filter to just home runs and count the number of rows:

```python
jeter_2008_hr = jeter_2008_data[jeter_2008_data['events'] == 'home_run'] 
hr_count = len(jeter_2008_hr)
print(f""Derek Jeter hit {hr_count} home runs in the 2008 season."")
```

Are you satisfied with this plan?","# 1. Import the statcast_batter and playerid_lookup functions from pybaseball
from pybaseball import statcast_batter, playerid_lookup

# 2. Look up Derek Jeter's MLBAM player ID
jeter_id = playerid_lookup('jeter', 'derek')  
jeter_mlbam_id = jeter_id.loc[0,'key_mlbam']
print(f""Derek Jeter's MLBAM player ID is {jeter_mlbam_id}"")

# 3. Get Derek Jeter's statcast batting data for the 2008 season
jeter_2008_data = statcast_batter('2008-01-01', '2008-12-31', player_id=116539)

# 4. Filter to just home runs and count the number of rows
jeter_2008_hr = jeter_2008_data[jeter_2008_data['events'] == 'home_run'] 
hr_count = len(jeter_2008_hr)
print(f""Derek Jeter hit {hr_count} home runs in the 2008 season."")","Text between the <statcast_batter_documentation></statcast_batter_documentation> tags is documentation for the statcast_batter library.  Consult this section to confirm which attributes to pass into the statcast_batter library.
<statcast_batter_documentation>
# Statcast Batter
`statcast_batter(start_dt=[yesterday's date], end_dt=None, player_id)`

The statcast function retrieves pitch-level statcast data for a given date or range or dates. 

## Arguments
`start_dt:` first day for which you want to retrieve data. Defaults to yesterday's date if nothing is entered. If you only want data for one date, supply a `start_dt` value but not an `end_dt` value. Format: YYYY-MM-DD. 

`end_dt:` last day for which you want to retrieve data. Defaults to None. If you want to retrieve data for more than one day, both a `start_dt` and `end_dt` value must be given. Format: YYYY-MM-DD. 

`player_id:` MLBAM player ID for the player you want to retrieve data for. To find a player's MLBAM ID, see the function [playerid_lookup](http://github.com/jldbc/pybaseball/docs/playerid_lookup.md) or the examples below. 

### A note on data availability 
The earliest available statcast data comes from the 2008 season when the system was first introduced to Major League Baseball. Queries before this year will not work. Further, some features were introduced after the 2008 season. Launch speed angle, for example, is only available from the 2015 season forward. 

## Examples of valid queries

```python
from pybaseball import statcast_batter
from pybaseball import playerid_lookup

# find David Ortiz's player id (mlbam_key)
playerid_lookup('ortiz','david')

# get all available data
data = statcast_batter('2008-04-01', '2017-07-15', player_id = 120074)

# get data for August 16th, 2014
data = statcast_batter('2014-08-16', player_id = 120074)
```

</statcast_batter_documentation>
Text between the <playerid_lookup_documentation></playerid_lookup_documentation> tags is documentation for the playerid_lookup library.  Consult this section to confirm which attributes to pass into the playerid_lookup library.
<playerid_lookup_documentation>
# Player ID Lookup

## Single Player Lookup

`playerid_lookup(last, first=None, fuzzy=False)`

Look up a player's MLBAM, Retrosheet, FanGraphs, and Baseball Reference ID by name.

## Arguments
`last:` String. The player's last name. Case insensitive.

`first:` String. Optional. The player's first name. Case insensitive.

`fuzzy:` Boolean. Optional. Search for inexact name matches, the 5 closest will be returned.

Providing last name only will return all available id data for players with that last name (this will return several rows for a common last name like Jones, for example.) If multiple players exist for a (last name, first name) pair, you can figure out who's who by seeing their first and last years of play in the fields `mlb_played_first` and `mlb_played_last`.

This data comes from Chadwick Bureau, meaning that there are several people in this data who are not MLB players. For this reason, supplying both last and first name is recommended to narrow your search. 

## Examples of valid queries

```python
from pybaseball import playerid_lookup

# find the ids of all players with last name Jones (returns 1,314 rows)
data = playerid_lookup('jones')

# only return the ids of chipper jones (returns one row)
data = playerid_lookup('jones','chipper')

# Will return all players named Pedro Martinez (returns *2* rows)
data = playerid_lookup(""martinez"", ""pedro"", fuzzy=True)

# Will return the 5 closest names to ""yadi molina"" (returns 5 rows)
# First row will be Yadier Molina
data = playerid_lookup(""molina"", ""yadi"", fuzzy=True)
```

## List Lookup

`player_search_list(player_list)`

Look up a list of player ID's by name, return a data frame of all players

`player_list:` List. A list of tuples, of the form `(last, first)`. Case Insensitive.

Sources are the same as those used in the above `playerid_lookup` function. Queries for this function must be exact name matches.

## Examples of valid queries

```python

from pybaseball import player_search_list

# Will return the ids for both Lou Brock and Chipper Jones (returns 2 rows)
data = player_search_list([(""brock"",""lou""), (""jones"",""chipper"")])

```
</playerid_lookup_documentation>
"
How many doubles did Whit Merrifield hit in 2019?,"1. Import the statcast_batter and playerid_lookup functions from pybaseball:

```python
from pybaseball import statcast_batter, playerid_lookup
```

2. Look up Whit Merrifield's MLBAM player ID:

```python
merrifield_id = playerid_lookup('merrifield', 'whit')
merrifield_mlbam_id = merrifield_id.loc[0,'key_mlbam']
```

3. Get Whit Merrifield's statcast batting data for the 2019 season:

```python
merrifield_2019_data = statcast_batter('2019-01-01', '2019-12-31', player_id=merrifield_mlbam_id)
```

4. Filter to just doubles and count the number of rows:

```python
merrifield_2019_doubles = merrifield_2019_data[merrifield_2019_data['events'] == 'double']
doubles_count = len(merrifield_2019_doubles)
print(f""Whit Merrifield hit {doubles_count} doubles in the 2019 season."")
```","# 1. Import libraries
from pybaseball import statcast_batter, playerid_lookup

# 2. Look up Merrifield's MLBAM ID 
merrifield_id = playerid_lookup('merrifield', 'whit')
merrifield_mlbam_id = merrifield_id.loc[0,'key_mlbam']
print(f""Whit Merrifield's MLBAM ID is {merrifield_mlbam_id}"")

# 3. Get 2019 statcast data
merrifield_2019_data = statcast_batter('2019-01-01', '2019-12-31', player_id=merrifield_mlbam_id)

# 4. Filter for doubles and count
merrifield_2019_doubles = merrifield_2019_data[merrifield_2019_data['events'] == 'double']
doubles_count = len(merrifield_2019_doubles)
print(f""Whit Merrifield hit {doubles_count} doubles in the 2019 season."")","Text between the <statcast_batter_documentation></statcast_batter_documentation> tags is documentation for the statcast_batter library.  Consult this section to confirm which attributes to pass into the statcast_batter library.
<statcast_batter_documentation>
# Statcast Batter
`statcast_batter(start_dt=[yesterday's date], end_dt=None, player_id)`

The statcast function retrieves pitch-level statcast data for a given date or range or dates. 

## Arguments
`start_dt:` first day for which you want to retrieve data. Defaults to yesterday's date if nothing is entered. If you only want data for one date, supply a `start_dt` value but not an `end_dt` value. Format: YYYY-MM-DD. 

`end_dt:` last day for which you want to retrieve data. Defaults to None. If you want to retrieve data for more than one day, both a `start_dt` and `end_dt` value must be given. Format: YYYY-MM-DD. 

`player_id:` MLBAM player ID for the player you want to retrieve data for. To find a player's MLBAM ID, see the function [playerid_lookup](http://github.com/jldbc/pybaseball/docs/playerid_lookup.md) or the examples below. 

### A note on data availability 
The earliest available statcast data comes from the 2008 season when the system was first introduced to Major League Baseball. Queries before this year will not work. Further, some features were introduced after the 2008 season. Launch speed angle, for example, is only available from the 2015 season forward. 

## Examples of valid queries

```python
from pybaseball import statcast_batter
from pybaseball import playerid_lookup

# find David Ortiz's player id (mlbam_key)
playerid_lookup('ortiz','david')

# get all available data
data = statcast_batter('2008-04-01', '2017-07-15', player_id = 120074)

# get data for August 16th, 2014
data = statcast_batter('2014-08-16', player_id = 120074)
```

</statcast_batter_documentation>
Text between the <playerid_lookup_documentation></playerid_lookup_documentation> tags is documentation for the playerid_lookup library.  Consult this section to confirm which attributes to pass into the playerid_lookup library.
<playerid_lookup_documentation>
# Player ID Lookup

## Single Player Lookup

`playerid_lookup(last, first=None, fuzzy=False)`

Look up a player's MLBAM, Retrosheet, FanGraphs, and Baseball Reference ID by name.

## Arguments
`last:` String. The player's last name. Case insensitive.

`first:` String. Optional. The player's first name. Case insensitive.

`fuzzy:` Boolean. Optional. Search for inexact name matches, the 5 closest will be returned.

Providing last name only will return all available id data for players with that last name (this will return several rows for a common last name like Jones, for example.) If multiple players exist for a (last name, first name) pair, you can figure out who's who by seeing their first and last years of play in the fields `mlb_played_first` and `mlb_played_last`.

This data comes from Chadwick Bureau, meaning that there are several people in this data who are not MLB players. For this reason, supplying both last and first name is recommended to narrow your search. 

## Examples of valid queries

```python
from pybaseball import playerid_lookup

# find the ids of all players with last name Jones (returns 1,314 rows)
data = playerid_lookup('jones')

# only return the ids of chipper jones (returns one row)
data = playerid_lookup('jones','chipper')

# Will return all players named Pedro Martinez (returns *2* rows)
data = playerid_lookup(""martinez"", ""pedro"", fuzzy=True)

# Will return the 5 closest names to ""yadi molina"" (returns 5 rows)
# First row will be Yadier Molina
data = playerid_lookup(""molina"", ""yadi"", fuzzy=True)
```

## List Lookup

`player_search_list(player_list)`

Look up a list of player ID's by name, return a data frame of all players

`player_list:` List. A list of tuples, of the form `(last, first)`. Case Insensitive.

Sources are the same as those used in the above `playerid_lookup` function. Queries for this function must be exact name matches.

## Examples of valid queries

```python

from pybaseball import player_search_list

# Will return the ids for both Lou Brock and Chipper Jones (returns 2 rows)
data = player_search_list([(""brock"",""lou""), (""jones"",""chipper"")])

```
</playerid_lookup_documentation>
"
Plot the cumulative sum of strikeouts thrown by Danny Duffy in the 2018 season.,"The current plan looks good and is using the pybaseball functions correctly:

1. Import the necessary libraries:

```python
from pybaseball import playerid_lookup, statcast_pitcher 
import matplotlib.pyplot as plt
import pandas as pd
```

2. Look up Danny Duffy's MLBAM player ID: 

```python
duffy_id = playerid_lookup('duffy', 'danny').key_mlbam.iloc[0]  
```

3. Get Danny Duffy's statcast pitching data for the 2018 season:

```python
duffy_2018_data = statcast_pitcher('2018-03-29', '2018-09-30', player_id=duffy_id)
```

4. Filter to strikeouts, group by game date, count strikeouts, and calculate cumulative sum:

```python
duffy_2018_strikeouts = duffy_2018_data[duffy_2018_data.events.isin(['strikeout', 'strikeout_double_play'])]
duffy_2018_strikeouts = duffy_2018_strikeouts.groupby('game_date').size().reset_index(name='strikeouts') 
duffy_2018_strikeouts['strikeouts_cumulative'] = duffy_2018_strikeouts.strikeouts.cumsum()
```

5. Plot the cumulative strikeout sum by game date:

```python
plt.figure(figsize=(10,6))
plt.plot(duffy_2018_strikeouts.game_date, duffy_2018_strikeouts.strikeouts_cumulative)
plt.xlabel('Game Date')
plt.ylabel('Cumulative Strikeouts') 
plt.title('Danny Duffy 2018 Cumulative Strikeouts by Game Date')
plt.show()
```

The playerid_lookup function is called with the correct last and first name to get Danny Duffy's player ID. 

The statcast_pitcher function is called with the correct start and end dates for the 2018 season, and is passed Danny Duffy's player ID that was looked up in the previous step.

So no changes are needed, the current plan should produce the desired plot of Danny Duffy's cumulative strikeouts over the 2018 season.

Are you satisfied with this plan?","# 1. Import necessary libraries
from pybaseball import playerid_lookup, statcast_pitcher
import matplotlib.pyplot as plt 
import pandas as pd

# 2. Look up Danny Duffy's MLBAM player ID
duffy_id = playerid_lookup('duffy', 'danny').key_mlbam.iloc[0]
print(f""Danny Duffy's MLBAM player ID is {duffy_id}"")

# 3. Get Danny Duffy's statcast pitching data for the 2018 season 
duffy_2018_data = statcast_pitcher('2018-03-29', '2018-09-30', player_id=duffy_id)

# 4. Filter to strikeouts, group by game date, count strikeouts, and calculate cumulative sum
duffy_2018_strikeouts = duffy_2018_data[duffy_2018_data.events.isin(['strikeout', 'strikeout_double_play'])]
duffy_2018_strikeouts = duffy_2018_strikeouts.groupby('game_date').size().reset_index(name='strikeouts')
duffy_2018_strikeouts['strikeouts_cumulative'] = duffy_2018_strikeouts.strikeouts.cumsum()

# 5. Plot the cumulative strikeout sum by game date
plt.figure(figsize=(10,6))
plt.plot(duffy_2018_strikeouts.game_date, duffy_2018_strikeouts.strikeouts_cumulative) 
plt.xlabel('Game Date')
plt.ylabel('Cumulative Strikeouts')
plt.title('Danny Duffy 2018 Cumulative Strikeouts by Game Date')
plt.show()

print(""The plot shows Danny Duffy's cumulative strikeout total increasing over the course of the 2018 season, ending up at 141 total strikeouts."")","Text between the <statcast_pitcher_documentation></statcast_pitcher_documentation> tags is documentation for the statcast_pitcher library.  Consult this section to confirm which attributes to pass into the statcast_pitcher library.
<statcast_pitcher_documentation>
# Statcast Pitcher
`statcast_pitcher(start_dt=[yesterday's date], end_dt=None, player_id)`

The statcast function retrieves pitch-level statcast data for a given date or range or dates. 

## Arguments
`start_dt:` first day for which you want to retrieve data. Defaults to yesterday's date if nothing is entered. If you only want data for one date, supply a `start_dt` value but not an `end_dt` value. Format: YYYY-MM-DD. 

`end_dt:` last day for which you want to retrieve data. Defaults to None. If you want to retrieve data for more than one day, both a `start_dt` and `end_dt` value must be given. Format: YYYY-MM-DD. 

`player_id:` MLBAM player ID for the pitcher you want to retrieve data for. To find a player's MLBAM ID, see the function [playerid_lookup](http://github.com/jldbc/pybaseball/docs/playerid_lookup.md) or the examples below. 

### A note on data availability 
The earliest available statcast data comes from the 2008 season when the system was first introduced to Major League Baseball. Queries before this year will not work. Further, some features were introduced after the 2008 season. Launch speed angle, for example, is only available from the 2015 season forward. 

### Known issue
In rare cases where a player has seen greater than 30,000 pitches over the time period specified in your query, only the first 30,000 of these plays will be returned. There is a fix in the works for this

## Examples of valid queries

```python
from pybaseball import statcast_pitcher
from pybaseball import playerid_lookup

# find Chris Sale's player id (mlbam_key)
playerid_lookup('sale','chris')

# get all available data
data = statcast_pitcher('2008-04-01', '2017-07-15', player_id = 519242)

# get data for July 15th, 2017
data = statcast_pitcher('2017-07-15','2017-07-15', player_id = 519242)
```
</statcast_pitcher_documentation>
Text between the <playerid_lookup_documentation></playerid_lookup_documentation> tags is documentation for the playerid_lookup library.  Consult this section to confirm which attributes to pass into the playerid_lookup library.
<playerid_lookup_documentation>
# Player ID Lookup

## Single Player Lookup

`playerid_lookup(last, first=None, fuzzy=False)`

Look up a player's MLBAM, Retrosheet, FanGraphs, and Baseball Reference ID by name.

## Arguments
`last:` String. The player's last name. Case insensitive.

`first:` String. Optional. The player's first name. Case insensitive.

`fuzzy:` Boolean. Optional. Search for inexact name matches, the 5 closest will be returned.

Providing last name only will return all available id data for players with that last name (this will return several rows for a common last name like Jones, for example.) If multiple players exist for a (last name, first name) pair, you can figure out who's who by seeing their first and last years of play in the fields `mlb_played_first` and `mlb_played_last`.

This data comes from Chadwick Bureau, meaning that there are several people in this data who are not MLB players. For this reason, supplying both last and first name is recommended to narrow your search. 

## Examples of valid queries

```python
from pybaseball import playerid_lookup

# find the ids of all players with last name Jones (returns 1,314 rows)
data = playerid_lookup('jones')

# only return the ids of chipper jones (returns one row)
data = playerid_lookup('jones','chipper')

# Will return all players named Pedro Martinez (returns *2* rows)
data = playerid_lookup(""martinez"", ""pedro"", fuzzy=True)

# Will return the 5 closest names to ""yadi molina"" (returns 5 rows)
# First row will be Yadier Molina
data = playerid_lookup(""molina"", ""yadi"", fuzzy=True)
```

## List Lookup

`player_search_list(player_list)`

Look up a list of player ID's by name, return a data frame of all players

`player_list:` List. A list of tuples, of the form `(last, first)`. Case Insensitive.

Sources are the same as those used in the above `playerid_lookup` function. Queries for this function must be exact name matches.

## Examples of valid queries

```python

from pybaseball import player_search_list

# Will return the ids for both Lou Brock and Chipper Jones (returns 2 rows)
data = player_search_list([(""brock"",""lou""), (""jones"",""chipper"")])

```
</playerid_lookup_documentation>
"
plot the cumulative sum of total walks thrown by Shane Bieber in the 2020 season.,"1. Import the necessary libraries:

```python
from pybaseball import playerid_lookup, statcast_pitcher
import matplotlib.pyplot as plt
import pandas as pd
```

2. Look up Shane Bieber's MLBAM player ID:

```python
bieber_id = playerid_lookup('bieber', 'shane').key_mlbam.iloc[0]
```

3. Get Shane Bieber's statcast pitching data for the 2020 season: 

```python
bieber_2020_data = statcast_pitcher('2020-07-23', '2020-09-27', player_id=bieber_id)
```

4. Filter to walks, group by game date, count walks, and calculate cumulative sum:

```python
bieber_2020_walks = bieber_2020_data[bieber_2020_data.events == 'walk']
bieber_2020_walks = bieber_2020_walks.groupby('game_date').size().reset_index(name='walks')
bieber_2020_walks['walks_cumulative'] = bieber_2020_walks.walks.cumsum()
```

5. Plot the cumulative walk sum by game date:

```python 
plt.figure(figsize=(10,6))
plt.plot(bieber_2020_walks.game_date, bieber_2020_walks.walks_cumulative)
plt.xlabel('Game Date')
plt.ylabel('Cumulative Walks')
plt.title('Shane Bieber 2020 Cumulative Walks by Game Date') 
plt.show()
```","# 1. Import necessary libraries
from pybaseball import playerid_lookup, statcast_pitcher
import matplotlib.pyplot as plt
import pandas as pd

# 2. Look up Shane Bieber's MLBAM player ID
bieber_id = playerid_lookup('bieber', 'shane').key_mlbam.iloc[0]
print(f""Shane Bieber's MLBAM player ID is {bieber_id}"")

# 3. Get Shane Bieber's 2020 statcast data
bieber_2020_data = statcast_pitcher('2020-07-23', '2020-09-27', player_id=bieber_id)

# 4. Filter to walks, group by date, count, and get cumulative sum
bieber_2020_walks = bieber_2020_data[bieber_2020_data.events == 'walk']
bieber_2020_walks = bieber_2020_walks.groupby('game_date').size().reset_index(name='walks')
bieber_2020_walks['walks_cumulative'] = bieber_2020_walks.walks.cumsum()

# 5. Plot cumulative walks by game date
plt.figure(figsize=(10,6))
plt.plot(bieber_2020_walks.game_date, bieber_2020_walks.walks_cumulative)
plt.xlabel('Game Date')
plt.ylabel('Cumulative Walks') 
plt.title('Shane Bieber 2020 Cumulative Walks by Game Date')
plt.show()

print(""The plot shows Shane Bieber's cumulative walk total increasing over the 2020 season, ending at 21 total walks."")","Text between the <statcast_pitcher_documentation></statcast_pitcher_documentation> tags is documentation for the statcast_pitcher library.  Consult this section to confirm which attributes to pass into the statcast_pitcher library.
<statcast_pitcher_documentation>
# Statcast Pitcher
`statcast_pitcher(start_dt=[yesterday's date], end_dt=None, player_id)`

The statcast function retrieves pitch-level statcast data for a given date or range or dates. 

## Arguments
`start_dt:` first day for which you want to retrieve data. Defaults to yesterday's date if nothing is entered. If you only want data for one date, supply a `start_dt` value but not an `end_dt` value. Format: YYYY-MM-DD. 

`end_dt:` last day for which you want to retrieve data. Defaults to None. If you want to retrieve data for more than one day, both a `start_dt` and `end_dt` value must be given. Format: YYYY-MM-DD. 

`player_id:` MLBAM player ID for the pitcher you want to retrieve data for. To find a player's MLBAM ID, see the function [playerid_lookup](http://github.com/jldbc/pybaseball/docs/playerid_lookup.md) or the examples below. 

### A note on data availability 
The earliest available statcast data comes from the 2008 season when the system was first introduced to Major League Baseball. Queries before this year will not work. Further, some features were introduced after the 2008 season. Launch speed angle, for example, is only available from the 2015 season forward. 

### Known issue
In rare cases where a player has seen greater than 30,000 pitches over the time period specified in your query, only the first 30,000 of these plays will be returned. There is a fix in the works for this

## Examples of valid queries

```python
from pybaseball import statcast_pitcher
from pybaseball import playerid_lookup

# find Chris Sale's player id (mlbam_key)
playerid_lookup('sale','chris')

# get all available data
data = statcast_pitcher('2008-04-01', '2017-07-15', player_id = 519242)

# get data for July 15th, 2017
data = statcast_pitcher('2017-07-15','2017-07-15', player_id = 519242)
```
</statcast_pitcher_documentation>
Text between the <playerid_lookup_documentation></playerid_lookup_documentation> tags is documentation for the playerid_lookup library.  Consult this section to confirm which attributes to pass into the playerid_lookup library.
<playerid_lookup_documentation>
# Player ID Lookup

## Single Player Lookup

`playerid_lookup(last, first=None, fuzzy=False)`

Look up a player's MLBAM, Retrosheet, FanGraphs, and Baseball Reference ID by name.

## Arguments
`last:` String. The player's last name. Case insensitive.

`first:` String. Optional. The player's first name. Case insensitive.

`fuzzy:` Boolean. Optional. Search for inexact name matches, the 5 closest will be returned.

Providing last name only will return all available id data for players with that last name (this will return several rows for a common last name like Jones, for example.) If multiple players exist for a (last name, first name) pair, you can figure out who's who by seeing their first and last years of play in the fields `mlb_played_first` and `mlb_played_last`.

This data comes from Chadwick Bureau, meaning that there are several people in this data who are not MLB players. For this reason, supplying both last and first name is recommended to narrow your search. 

## Examples of valid queries

```python
from pybaseball import playerid_lookup

# find the ids of all players with last name Jones (returns 1,314 rows)
data = playerid_lookup('jones')

# only return the ids of chipper jones (returns one row)
data = playerid_lookup('jones','chipper')

# Will return all players named Pedro Martinez (returns *2* rows)
data = playerid_lookup(""martinez"", ""pedro"", fuzzy=True)

# Will return the 5 closest names to ""yadi molina"" (returns 5 rows)
# First row will be Yadier Molina
data = playerid_lookup(""molina"", ""yadi"", fuzzy=True)
```

## List Lookup

`player_search_list(player_list)`

Look up a list of player ID's by name, return a data frame of all players

`player_list:` List. A list of tuples, of the form `(last, first)`. Case Insensitive.

Sources are the same as those used in the above `playerid_lookup` function. Queries for this function must be exact name matches.

## Examples of valid queries

```python

from pybaseball import player_search_list

# Will return the ids for both Lou Brock and Chipper Jones (returns 2 rows)
data = player_search_list([(""brock"",""lou""), (""jones"",""chipper"")])

```
</playerid_lookup_documentation>
"
